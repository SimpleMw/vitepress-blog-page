import{_ as t,C as e,o as c,c as r,H as n,w as l,Q as o,k as s,a as p}from"./chunks/framework.8153c8a6.js";const ss=JSON.parse('{"title":"基础小点杂","description":"","frontmatter":{"title":"基础小点杂","date":"2020-10-01T08:34:36.000Z","category":"java基础相关","tag":"java","top_img":false},"headers":[],"relativePath":"guide/javabasic/基础小点杂.md","filePath":"guide/javabasic/基础小点杂.md"}'),E={name:"guide/javabasic/基础小点杂.md"},y=o('<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Scanner scanner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scanner</span><span style="color:#E1E4E8;">(System.in);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Scanner scanner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(System.in);</span></span></code></pre></div><p>将控制台获取的信息用scanner对象容器进行接收，使用对象即可以操作输入信息</p>',2),i=s("p",null,"break 跳出循环，无下次循环",-1),d=s("p",null,"continue 终止当前循环，有下次循环",-1),u=s("p",null,"同一个类终，方法名相同，参数列表不同",-1),_=s("p",null,"子类继承父类时，对父类的方法进行重新覆写",-1),F=s("p",null,"方法名、返回值类型、形参相同；访问权限>=重写前；抛出异常<=重写前",-1),g=o('<p>一个方法只能有一个可变参数</p><p>可变参数只能在末尾</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(String str,String ... str1)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(String str,String ... str1)</span></span></code></pre></div><p>用 ...表示</p>',4),h=o(`<p>定义数组</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] numbers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> numbers1[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] numbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> numbers1[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">};</span></span></code></pre></div><p>数组起始下标为0</p>`,3),C=s("p",null,"栈：声明的名字存在 栈中 main()方法是存在栈里面的，基本数据类型是存在栈中的",-1),v=s("p",null,"堆：new创建的时候开辟内存空间 也即对象是存在堆中的",-1),b=s("ul",null,[s("li",null,[s("p",null,"构造器的名字与类名相同，无返回值")]),s("li",null,[s("p",null,"默认存在一个无参构造器，若存在一个有参构造器，则默认的无参构造器就不存在了")]),s("li",null,[s("p",null,"new方法时，本质是在调用构造器(首先调用父类的构造器，然后调用子类的构造器，且必须调用父类的构造方法)")]),s("li",null,[s("p",null,"构造器的作用是初始化值")])],-1),A=s("p",null,"this：谁调用代表谁 super：代表父类",-1),B=s("p",null,"this() 调用本类的构造方法 super()调用父类的构造方法",-1),m=s("ul",null,[s("li",null,[s("p",null,"抽象类的方法必须由其非抽象子类实现")]),s("li",null,[s("p",null,"抽象类中可以有普通方法")]),s("li",null,[s("p",null,"抽象类有构造方法，但是没有方法实现，也即不能使用new实例化，构造方法用来初始化")])],-1),S=s("ul",null,[s("li",null,[s("p",null,"接口中的方法无实现")]),s("li",null,[s("p",null,"接口中方法默认为public")]),s("li",null,[s("p",null,"类实现接口 implements")]),s("li",null,[s("p",null,"若实现的多个接口中存在多个相同的方法，则实现类中只会出现一个")]),s("li",null,[s("p",null,"接口中的常量默认为 public static final")]),s("li",null,[s("p",null,"接口中无构造方法")])],-1),D=s("p",null,"子类继承了父类的所有方法和成员，但对私有的无权限调用",-1),T=s("p",null,"当一个基础数据类型与封装类进行==、+、-、*、/运算时，会将封装类进行拆箱，对基础数据类型进行运算。",-1),q=s("ul",null,[s("li",null,"JDK包含jre"),s("li",null,"JDK是面向开发人员使用的SDK，jre是Java Runtime Enviroment运行环境是面向java程序的使用者")],-1),k=s("p",null,"== 和 equals 的区别",-1),f=s("ul",null,[s("li",null,"== 比较的地址"),s("li",null,"equals 比较的是值")],-1),I=s("ul",null,[s("li",null,"hashcode()返回的是一个hash值，是为了方便查找"),s("li",null,"equals() 是用于比较"),s("li",null,"equals()比较为 true时，他们的hash值必定相同；equals()比较不同时，他们的hash值也可能相同(数据碰撞的情况)")],-1),j=s("p",null,"hash碰撞",-1),P=s("p",null,"将任意长度的数据 经过算法 转为 一段有限长度的数据 （无穷转有限，必定会出现碰撞，对于我们用到的遇到碰撞却很小）",-1),V=s("p",null,"在集合中的应用（集合分为list、set，list有序可重复，set无序不可重复）",-1),w=s("p",null,"在set中保证不重复，首先会比较hash值，若hash值不同，则必定不重复;若hash值相同，则根据equals()比较，不同则不重复，相同则重复",-1),W=s("p",null,"将10进制以二进制（基数 2）无符号整数形式返回一个整数参数的字符串表示形式。 如果参数为负，该无符号整数值为参数加上 2^32；否则等于该参数。",-1),N=o(`<p>^ 异或 相同为0，不同为1</p><p>&amp;与 都为1则为1，不都为1则为0</p><p>|或 有一个为1则为1，否则为0</p><p>~非 为1则为0，为0则为1</p><p><strong>&lt;&lt;</strong> 左移运算符 向左移位，最低位补0</p><p>例 -1010 &lt;&lt;1 -10100 1010 &lt;&lt;1 10100</p><p><strong>&gt;&gt;</strong> 右移运算符 向右移位，去掉几个最低位，高位补0或者1与原整数正负有关</p><p>例 -1010 &gt;&gt;1 0101 1010 &gt;&gt;1 1101</p><p><strong>&gt;&gt;&gt;</strong> 无符号右移运算符 向右移位，去掉几个最低位，高位补0与原整数的正负无关</p><p>例 -1010 &gt;&gt;&gt;1 0101 1010 &gt;&gt;&gt; 0101</p><p>加法算法(使用位运算的算法)</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Addfunction</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a ,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;执行第&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;次&quot;</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> _a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a为:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">toBinaryString</span><span style="color:#E1E4E8;">(a));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b为:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">toBinaryString</span><span style="color:#E1E4E8;">(b));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;_a为:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">toBinaryString</span><span style="color:#E1E4E8;">(_a));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> _b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a &amp; b为:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">Integer.</span><span style="color:#B392F0;">toBinaryString</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> b));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;_b为:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">toBinaryString</span><span style="color:#E1E4E8;">(_b));</span></span>
<span class="line"><span style="color:#E1E4E8;">        a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _a;</span></span>
<span class="line"><span style="color:#E1E4E8;">        b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;变化后的a为:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">toBinaryString</span><span style="color:#E1E4E8;">(a));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;变化后的b为:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">toBinaryString</span><span style="color:#E1E4E8;">(b));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//_a表示进位的相加    _b 表示不进位的 相加</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//递归执行   _a + _b  直到 不进位的相加不存在</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Addfunction</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a ,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;执行第&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;次&quot;</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> _a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">^</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a为:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">toBinaryString</span><span style="color:#24292E;">(a));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b为:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">toBinaryString</span><span style="color:#24292E;">(b));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;_a为:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">toBinaryString</span><span style="color:#24292E;">(_a));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> _b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a &amp; b为:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">Integer.</span><span style="color:#6F42C1;">toBinaryString</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> b));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;_b为:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">toBinaryString</span><span style="color:#24292E;">(_b));</span></span>
<span class="line"><span style="color:#24292E;">        a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _a;</span></span>
<span class="line"><span style="color:#24292E;">        b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;变化后的a为:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">toBinaryString</span><span style="color:#24292E;">(a));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;变化后的b为:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">toBinaryString</span><span style="color:#24292E;">(b));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//_a表示进位的相加    _b 表示不进位的 相加</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//递归执行   _a + _b  直到 不进位的相加不存在</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,12),R=o('<p>二进制转10进制</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;101&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;101&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div>',2),M=o('<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%010d&quot;</span><span style="color:#E1E4E8;">, youNumber);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%010d&quot;</span><span style="color:#24292E;">, youNumber);</span></span></code></pre></div>',1),U=o(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Collections.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(list,</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Comparator&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compare</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user1</span><span style="color:#E1E4E8;">, User </span><span style="color:#FFAB70;">user2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//此处可自定义比较逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user1.</span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(user2.</span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(list,</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user1</span><span style="color:#24292E;">, User </span><span style="color:#E36209;">user2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//此处可自定义比较逻辑</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user1.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(user2.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div>`,1),L=o(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">StopWatch stopWatch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StopWatch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">stopWatch.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;任务1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">stopWatch.</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;该任务耗时为：&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">stopWatch.</span><span style="color:#B392F0;">getLastTaskTimeMillis</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">stopWatch.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;任务2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">stopWatch.</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;该任务耗时为：&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">stopWatch.</span><span style="color:#B392F0;">getLastTaskTimeMillis</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;任务总数为&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">stopWatch.</span><span style="color:#B392F0;">getTaskCount</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;总耗时为：&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">stopWatch.</span><span style="color:#B392F0;">getTotalTimeSeconds</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StopWatch stopWatch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StopWatch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">stopWatch.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;任务1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">stopWatch.</span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;该任务耗时为：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">stopWatch.</span><span style="color:#6F42C1;">getLastTaskTimeMillis</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">stopWatch.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;任务2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">stopWatch.</span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;该任务耗时为：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">stopWatch.</span><span style="color:#6F42C1;">getLastTaskTimeMillis</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;任务总数为&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">stopWatch.</span><span style="color:#6F42C1;">getTaskCount</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;总耗时为：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">stopWatch.</span><span style="color:#6F42C1;">getTotalTimeSeconds</span><span style="color:#24292E;">());</span></span></code></pre></div>`,1),x=o('<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> minutes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ChronoUnit.MINUTES.</span><span style="color:#B392F0;">between</span><span style="color:#E1E4E8;">(Instant.</span><span style="color:#B392F0;">ofEpochMilli</span><span style="color:#E1E4E8;">(date1.</span><span style="color:#B392F0;">getTime</span><span style="color:#E1E4E8;">()), Instant.</span><span style="color:#B392F0;">ofEpochMilli</span><span style="color:#E1E4E8;">(date2.</span><span style="color:#B392F0;">getTime</span><span style="color:#E1E4E8;">()));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> minutes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ChronoUnit.MINUTES.</span><span style="color:#6F42C1;">between</span><span style="color:#24292E;">(Instant.</span><span style="color:#6F42C1;">ofEpochMilli</span><span style="color:#24292E;">(date1.</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">()), Instant.</span><span style="color:#6F42C1;">ofEpochMilli</span><span style="color:#24292E;">(date2.</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">()));</span></span></code></pre></div>',1),J=o(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">BigDecimal value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BigDecimal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;10.5000&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">BigDecimal strippedValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">stripTrailingZeros</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BigDecimal value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigDecimal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10.5000&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal strippedValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">stripTrailingZeros</span><span style="color:#24292E;">();</span></span></code></pre></div>`,1),K=o(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">BigDecimal value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BigDecimal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;10.5&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">BigDecimal paddedValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">setScale</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, RoundingMode.HALF_UP);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BigDecimal value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigDecimal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10.5&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">BigDecimal paddedValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">setScale</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, RoundingMode.HALF_UP);</span></span></code></pre></div>`,1),$=o('<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostConstruct</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostConstruct</span></span></code></pre></div><p>在bean被spring加载初始化之前执行</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PreDestroy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PreDestroy</span></span></code></pre></div><p>在bean被销毁前执行</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Qualifier</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Qualifier</span></span></code></pre></div><p>系统中存在同一类型的多个bean时，通过该注解来指定对应的bean</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SneakyThrows</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SneakyThrows</span></span></code></pre></div><p>lombok的注解，用于忽略抛出的异常</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Lazy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Lazy</span></span></code></pre></div><p>用于延迟加载 Bean（组件）的初始化，Spring 容器将在第一次使用该 Bean 时才进行初始化，而不是在容器启动时立即初始化</p>',10);function H(O,Q,Z,z,G,X){const a=e("font");return c(),r("div",null,[n(a,{color:"dd0000"},{default:l(()=>[p("Scanner")]),_:1}),y,n(a,{color:"dd0000"},{default:l(()=>[p("循环 break 和 continue")]),_:1}),i,d,n(a,{color:"dd0000"},{default:l(()=>[p("方法重载")]),_:1}),u,n(a,{color:"dd0000"},{default:l(()=>[p("方法重写")]),_:1}),_,F,n(a,{color:"dd0000"},{default:l(()=>[p("可变参数")]),_:1}),g,n(a,{color:"dd0000"},{default:l(()=>[p("数组 数组的大小是不可变的")]),_:1}),h,n(a,{color:"dd0000"},{default:l(()=>[p("堆栈")]),_:1}),C,v,n(a,{color:"dd0000"},{default:l(()=>[p("构造器")]),_:1}),b,n(a,{color:"dd0000"},{default:l(()=>[p("this与super")]),_:1}),A,B,n(a,{color:"dd0000"},{default:l(()=>[p("抽象类")]),_:1}),m,n(a,{color:"dd0000"},{default:l(()=>[p("接口")]),_:1}),S,n(a,{color:"dd0000"},{default:l(()=>[p("继承")]),_:1}),D,n(a,{color:"dd0000"},{default:l(()=>[p("类 单继承，多实现；接口多继承")]),_:1}),n(a,{color:"dd0000"},{default:l(()=>[p("匿名内部类 new 接口")]),_:1}),n(a,{color:"dd0000"},{default:l(()=>[p("自动拆箱")]),_:1}),T,n(a,{color:"dd0000"},{default:l(()=>[p("JDK 和 jre区别")]),_:1}),q,k,f,n(a,{color:"dd0000"},{default:l(()=>[p("hashCode()和equals()联系")]),_:1}),I,j,P,V,w,n(a,{color:"dd0000"},{default:l(()=>[p("Integer.toBinaryString()函数")]),_:1}),W,n(a,{color:"dd0000"},{default:l(()=>[p("位运算")]),_:1}),N,n(a,{color:"dd0000"},{default:l(()=>[p("进制转换")]),_:1}),R,n(a,{color:"dd0000"},{default:l(()=>[p("补位")]),_:1}),M,n(a,{color:"dd0000"},{default:l(()=>[p("排序")]),_:1}),U,n(a,{color:"dd0000"},{default:l(()=>[p("优雅获取执行时间")]),_:1}),L,n(a,{color:"dd0000"},{default:l(()=>[p("计算时间差")]),_:1}),x,n(a,{color:"dd0000"},{default:l(()=>[p("BigDecimal去掉后面多余的0")]),_:1}),J,n(a,{color:"dd0000"},{default:l(()=>[p("BigDecimal后面补0")]),_:1}),K,n(a,{color:"dd0000"},{default:l(()=>[p("注解")]),_:1}),$])}const as=t(E,[["render",H]]);export{ss as __pageData,as as default};
