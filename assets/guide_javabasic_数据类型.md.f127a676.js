import{_ as l,o as i,c as t,Q as p}from"./chunks/framework.a0a80147.js";const f=JSON.parse('{"title":"java基本数据类型","description":"","frontmatter":{"title":"java基本数据类型","date":"2020-10-01T08:34:36.000Z","category":"java基础相关","tag":"java","top_img":false},"headers":[],"relativePath":"guide/javabasic/数据类型.md","filePath":"guide/javabasic/数据类型.md"}'),a={name:"guide/javabasic/数据类型.md"},e=p("<ul><li><p>基本数据类型</p><ul><li>整数型 byte short int long <ul><li>long在给值的时候加L</li></ul></li><li>浮点型 flout double <ul><li>flout在给值的时候加F</li><li>由于浮点型表示一个数的时候是无限接近，在进行运算时一般不用浮点型来表示 <ul><li>例如 表示一个人的资质金额的时候 使用 bigdecima</li></ul></li></ul></li><li>字符型 char</li><li>布尔型 Boolean</li></ul></li><li><p>变量初始值</p><p>基本数据类型 整数型0 浮点型0.0 布尔型false 字符型u0000</p><p>引用数据类型 null</p></li><li><p>精度</p><p>单精度浮点数在机内存占4个字节 float 8位有效数字(不带小数点，且最前面的0不算)</p><p>双精度浮点数在机内存占8个字节 double 17位有效数字(不带小数点，0-1之间时前面的0要算)</p></li><li><p>整数型 原码，反码，补码</p><p>反码 除符号位所有的0--&gt;1 1--&gt;0</p><p>补码 反码加1</p><p>注：反码补码出现原因，计算负数相加， 解决 +0和-0的问题，乘法也能转为加法，除法转为减法再转为加法，即四则运算全可转为加法运算</p></li><li><p>类型转换</p><ul><li><p>自动类型转换 低--&gt;高</p></li><li><p>强制类型转换 高--&gt;低</p><p>注：强制类型转换有精度损失</p></li></ul></li><li><p>字符串连接符</p><p>基本数据类型和字符串混合用的时候，根据顺序来进行加减或者字符串连接</p><p>&quot;&quot;+10+20 ---&gt; 1020 10+20+&quot;&quot; ---&gt; 30</p><p>即字符串出现在最右边则自动转位字符串连接</p></li></ul>",1),o=[e];function _(u,s,c,n,r,d){return i(),t("div",null,o)}const m=l(a,[["render",_]]);export{f as __pageData,m as default};
