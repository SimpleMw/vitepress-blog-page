import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a0a80147.js";const h=JSON.parse('{"title":"zookeeper分布式锁使用","description":"","frontmatter":{"title":"zookeeper分布式锁使用","date":"2021-04-22T10:17:27.000Z"},"headers":[],"relativePath":"guide/springcloud/分布式锁/Zookeeper分布式锁.md","filePath":"guide/springcloud/分布式锁/Zookeeper分布式锁.md"}'),p={name:"guide/springcloud/分布式锁/Zookeeper分布式锁.md"},e=l(`<h5 id="整合zookeeper" tabindex="-1">整合zookeeper <a class="header-anchor" href="#整合zookeeper" aria-label="Permalink to &quot;整合zookeeper&quot;">​</a></h5><ul><li><p>安装zookeeper</p><ul><li>开启zookeeper服务</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#在zookeeper安装目录bin目录下</span></span>
<span class="line"><span style="color:#B392F0;">zkServer.sh</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#在zookeeper安装目录bin目录下</span></span>
<span class="line"><span style="color:#6F42C1;">zkServer.sh</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span></span></code></pre></div><ul><li>开启zookeeper客户端</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#在zookeeper安装目录bin目录下</span></span>
<span class="line"><span style="color:#B392F0;">./zkCli.sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#在zookeeper安装目录bin目录下</span></span>
<span class="line"><span style="color:#6F42C1;">./zkCli.sh</span></span></code></pre></div></li><li><p>依赖</p></li></ul><div class="language-XML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">XML</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.curator&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;curator-recipes&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.0.1&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.curator&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;curator-recipes&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.0.1&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>通过封装好的curator来实现</p><ul><li>代码顺序</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CuratorFramework curatorFramework;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//设置zookeeper节点</span></span>
<span class="line"><span style="color:#E1E4E8;">InterProcessMutex interProcessMutex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterProcessMutex</span><span style="color:#E1E4E8;">(curatorFramework,</span><span style="color:#9ECBFF;">&quot;/product&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//开启锁</span></span>
<span class="line"><span style="color:#E1E4E8;">    interProcessMutex.</span><span style="color:#B392F0;">acquire</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    zookeeperService.</span><span style="color:#B392F0;">doThings</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//释放锁</span></span>
<span class="line"><span style="color:#E1E4E8;">        interProcessMutex.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CuratorFramework curatorFramework;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//设置zookeeper节点</span></span>
<span class="line"><span style="color:#24292E;">InterProcessMutex interProcessMutex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterProcessMutex</span><span style="color:#24292E;">(curatorFramework,</span><span style="color:#032F62;">&quot;/product&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//开启锁</span></span>
<span class="line"><span style="color:#24292E;">    interProcessMutex.</span><span style="color:#6F42C1;">acquire</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    zookeeperService.</span><span style="color:#6F42C1;">doThings</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//释放锁</span></span>
<span class="line"><span style="color:#24292E;">        interProcessMutex.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h5 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h5><ul><li>多个线程都会在zookeeper的同一个路径下创建节点，并且zookeeper会自动按创建的先后顺序给节点编号</li><li>线程的执行先后顺序按节点的大小来，最先创建节点的线程先执行，即节点值最小的先执行</li><li>为了解决惊群效应，则使用后一个监听前一个的方式，当前一个节点故障或者被删除才执行后一个线程</li></ul>`,8),o=[e];function t(c,r,E,i,y,d){return a(),n("div",null,o)}const g=s(p,[["render",t]]);export{h as __pageData,g as default};
