import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.8153c8a6.js";const v=JSON.parse('{"title":"依赖注入三级缓存","description":"","frontmatter":{"title":"依赖注入三级缓存","date":"2020-12-26T17:01:10.000Z"},"headers":[],"relativePath":"guide/springbasic/循环依赖.md","filePath":"guide/springbasic/循环依赖.md"}'),e={name:"guide/springbasic/循环依赖.md"},p=n(`<h5 id="依赖注入的方式" tabindex="-1">依赖注入的方式 <a class="header-anchor" href="#依赖注入的方式" aria-label="Permalink to &quot;依赖注入的方式&quot;">​</a></h5><ul><li>属性注入</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DemoService demoService;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DemoService demoService;</span></span></code></pre></div><p>注：注入对象不能通过final修饰，无法发现空指针</p><ul><li>setter注入</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DemoService demoService; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setDemoService</span><span style="color:#E1E4E8;">(DemoService demoService) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.demoService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> demoService;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DemoService demoService; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setDemoService</span><span style="color:#24292E;">(DemoService demoService) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.demoService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> demoService;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>构造器注入</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">public class DemoController {</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    private final DemoService demoService;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    public SysUserController(DemoService demoService) {</span></span>
<span class="line"><span style="color:#e1e4e8;">        this.demoService = demoService;</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public class DemoController {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    private final DemoService demoService;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    public SysUserController(DemoService demoService) {</span></span>
<span class="line"><span style="color:#24292e;">        this.demoService = demoService;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>注：存在循环依赖问题</p><ul><li>Lombox 的 @RequiredArgsConstructor</li></ul><p>生成带final修饰的私有构造方法</p><h5 id="三级缓存" tabindex="-1">三级缓存 <a class="header-anchor" href="#三级缓存" aria-label="Permalink to &quot;三级缓存&quot;">​</a></h5><ul><li>存放正在创建bean的名称</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; singletonsCurrentlyInCreation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">newSetFromMap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; singletonsCurrentlyInCreation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">newSetFromMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">));</span></span></code></pre></div><ul><li>存放完全初始化好的Bean(一级缓存)</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; singletonObjects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; singletonObjects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">);</span></span></code></pre></div><ul><li>存放实例化但是未初始化的Bean(早期引用)(二级缓存)</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; earlySingletonObjects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; earlySingletonObjects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span></code></pre></div><ul><li>存放Bean工厂对象(三级缓存)</li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, ObjectFactory&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; singletonFactories </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, ObjectFactory&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; singletonFactories </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span></code></pre></div><h5 id="依赖创建流程" tabindex="-1">依赖创建流程 <a class="header-anchor" href="#依赖创建流程" aria-label="Permalink to &quot;依赖创建流程&quot;">​</a></h5><h6 id="非循环依赖a依赖了b" tabindex="-1">非循环依赖A依赖了B <a class="header-anchor" href="#非循环依赖a依赖了b" aria-label="Permalink to &quot;非循环依赖A依赖了B&quot;">​</a></h6><ul><li><p>在 singletonsCurrentlyInCreation 中存入A，表示A正在创建中</p></li><li><p>判断A是否在一级缓存中，存在就直接从一级缓存中拿</p></li><li><p>一级缓存不存在，判断二级缓存中是否存在</p><ul><li>二级缓存中存在，初始化A，并将A剪切至一级缓存</li><li>二级缓存中不存在，从三级缓存中拿到创建A的工厂，创建A后剪切至一级缓存</li></ul></li><li><p>三级缓存创建A</p><ul><li>若A依赖了B，则需要先将B创建完成，从一级缓冲中拿到B，初始化A后剪切至一级缓存</li></ul></li></ul><h6 id="循环依赖-a依赖了b-b依赖了a" tabindex="-1">循环依赖 A依赖了B B依赖了A <a class="header-anchor" href="#循环依赖-a依赖了b-b依赖了a" aria-label="Permalink to &quot;循环依赖 A依赖了B B依赖了A&quot;">​</a></h6><ul><li><p>在 singletonsCurrentlyInCreation 中存入A，表示A正在创建中</p></li><li><p>判断A是否在一级缓存中，存在就直接从一级缓存中拿</p></li><li><p>一级缓存不存在，判断二级缓存中是否存在</p><ul><li>二级缓存中存在，初始化A，并将A剪切至一级缓存</li><li>二级缓冲中不存在，从三级缓存中拿到创建A的工厂创建A</li></ul></li><li><p>三级缓存创建A</p><ul><li><p>若A依赖B，则先创建B，再创建A</p></li><li><p>创建B</p><ul><li>在 singletonsCurrentlyInCreation 中存入B，表示B正在创建中</li><li>一二级缓存中都不存在B情况下，三级缓存创建B <ul><li>B依赖了A，判断 singletonsCurrentlyInCreation 是否在创建中，若A在创建中，则先实例化A(先不初始化，即A中不填入属性)，将A从三级缓存剪切到二级缓存</li><li>创建B，将二级缓存中的A放入B，初始化完成后将B剪切至一级缓存，将B从 singletonsCurrentlyInCreation 移除，表示B创建完成</li></ul></li></ul></li><li><p>从二级缓存中拿到A，从一级缓存中拿到B，将B填入A，初始化完成A以后将A剪切至一级缓存</p></li><li><p>将A从 singletonsCurrentlyInCreation 中移除，表示A创建完成</p></li></ul></li></ul>`,25),o=[p];function t(c,r,i,y,E,d){return a(),l("div",null,o)}const g=s(e,[["render",t]]);export{v as __pageData,g as default};
