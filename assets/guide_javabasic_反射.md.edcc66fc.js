import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a0a80147.js";const A=JSON.parse('{"title":"反射","description":"","frontmatter":{"title":"反射","date":"2020-10-04T13:25:25.000Z","category":"java基础相关","tag":"java","top_img":false},"headers":[],"relativePath":"guide/javabasic/反射.md","filePath":"guide/javabasic/反射.md"}'),p={name:"guide/javabasic/反射.md"},o=l(`<h2 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-label="Permalink to &quot;反射&quot;">​</a></h2><p>解释：反射是对编译成的class文件进行解析，拿到其属性和方法</p><ul><li>首先都是获取类</li></ul><div class="language-JAVA vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//第一种，通过类名</span></span>
<span class="line"><span style="color:#E1E4E8;">Class 新名 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 类名.class;</span></span>
<span class="line"><span style="color:#6A737D;">//第二种，通过全类名</span></span>
<span class="line"><span style="color:#E1E4E8;">Class 新名 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;包名.类名&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//第三种，通过对象获得</span></span>
<span class="line"><span style="color:#E1E4E8;">根据类new一个对象;</span></span>
<span class="line"><span style="color:#E1E4E8;">Class 新名 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 对象.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//第一种，通过类名</span></span>
<span class="line"><span style="color:#24292E;">Class 新名 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 类名.class;</span></span>
<span class="line"><span style="color:#6A737D;">//第二种，通过全类名</span></span>
<span class="line"><span style="color:#24292E;">Class 新名 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;包名.类名&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//第三种，通过对象获得</span></span>
<span class="line"><span style="color:#24292E;">根据类new一个对象;</span></span>
<span class="line"><span style="color:#24292E;">Class 新名 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 对象.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span></code></pre></div><ul><li>拿到属性 <ul><li>通过field得到属性的类型和名字 得到方法 用method</li></ul></li></ul><div class="language-JAVA vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//得到某个类的所有属性</span></span>
<span class="line"><span style="color:#F97583;">Field</span><span style="color:#E1E4E8;">[] fields </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 新名.</span><span style="color:#B392F0;">getDeclaredFields</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//得到某个类的带public的所有属性，包括其父类、父类的父类</span></span>
<span class="line"><span style="color:#6A737D;">//Field[] fields = 新名.getFields();</span></span>
<span class="line"><span style="color:#6A737D;">//遍历所有属性并打印名字</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Fiedl field </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fields){</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(field.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//通过属性名字得到属性</span></span>
<span class="line"><span style="color:#E1E4E8;">Field 新属性名 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 新名.</span><span style="color:#B392F0;">getDeclaredFields</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;属性名&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//得到属性的基本数据类型</span></span>
<span class="line"><span style="color:#E1E4E8;">新属性名.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//得到某个类的所有属性</span></span>
<span class="line"><span style="color:#D73A49;">Field</span><span style="color:#24292E;">[] fields </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 新名.</span><span style="color:#6F42C1;">getDeclaredFields</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//得到某个类的带public的所有属性，包括其父类、父类的父类</span></span>
<span class="line"><span style="color:#6A737D;">//Field[] fields = 新名.getFields();</span></span>
<span class="line"><span style="color:#6A737D;">//遍历所有属性并打印名字</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Fiedl field </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> fields){</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(field.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//通过属性名字得到属性</span></span>
<span class="line"><span style="color:#24292E;">Field 新属性名 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 新名.</span><span style="color:#6F42C1;">getDeclaredFields</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;属性名&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//得到属性的基本数据类型</span></span>
<span class="line"><span style="color:#24292E;">新属性名.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">();</span></span></code></pre></div><ul><li>拿到方法</li></ul><div class="language-JAVA vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//得到某个类的所有方法</span></span>
<span class="line"><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">[] methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 新名.</span><span style="color:#B392F0;">getDeclaredMethods</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//与field一样也有getMethods()</span></span>
<span class="line"><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">[] methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 新名.</span><span style="color:#B392F0;">getMethods</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//遍历所有的方法</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Method method </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Methods){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//得到方法名和返回值类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    String str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTypeName</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//参数列表的遍历(参数列表内不止一个)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] str2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; class1 </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> str2){</span></span>
<span class="line"><span style="color:#E1E4E8;">        system.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(class1.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//通过方法名得到方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//参数列表是基本参数类型的，在反射中得到方法时填入包装类</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">[] methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 新名.</span><span style="color:#B392F0;">getDeclaredMethods</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;方法名&quot;</span><span style="color:#E1E4E8;">,参数列表每一个参数的类型的类);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//根据原类创建对象newInstance()，类为People举例，再执行方法invoke()</span></span>
<span class="line"><span style="color:#E1E4E8;">    People p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (People) people.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//第一个为对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    方法名.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(p,赋的值);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//得到某个类的所有方法</span></span>
<span class="line"><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[] methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 新名.</span><span style="color:#6F42C1;">getDeclaredMethods</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//与field一样也有getMethods()</span></span>
<span class="line"><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[] methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 新名.</span><span style="color:#6F42C1;">getMethods</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//遍历所有的方法</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Method method </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Methods){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//得到方法名和返回值类型</span></span>
<span class="line"><span style="color:#24292E;">    String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTypeName</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//参数列表的遍历(参数列表内不止一个)</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] str2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; class1 </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> str2){</span></span>
<span class="line"><span style="color:#24292E;">        system.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(class1.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//通过方法名得到方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//参数列表是基本参数类型的，在反射中得到方法时填入包装类</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[] methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 新名.</span><span style="color:#6F42C1;">getDeclaredMethods</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;方法名&quot;</span><span style="color:#24292E;">,参数列表每一个参数的类型的类);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//根据原类创建对象newInstance()，类为People举例，再执行方法invoke()</span></span>
<span class="line"><span style="color:#24292E;">    People p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (People) people.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//第一个为对象</span></span>
<span class="line"><span style="color:#24292E;">    方法名.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(p,赋的值);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>反射去泛型</li></ul><div class="language-JAVA vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//创建两个泛型</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayList&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; inte </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#6A737D;">//得到泛型的值</span></span>
<span class="line"><span style="color:#E1E4E8;">Class str1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Class inte1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inte.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//比较是否是同一个值</span></span>
<span class="line"><span style="color:#E1E4E8;">system.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str1</span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;">inte1);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//创建两个泛型</span></span>
<span class="line"><span style="color:#24292E;">ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">ArrayList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; inte </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#6A737D;">//得到泛型的值</span></span>
<span class="line"><span style="color:#24292E;">Class str1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Class inte1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inte.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//比较是否是同一个值</span></span>
<span class="line"><span style="color:#24292E;">system.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str1</span><span style="color:#D73A49;">==</span><span style="color:#24292E;">inte1);</span></span></code></pre></div><p>输出结果为true，验证正确，反射确实是去泛型</p><hr><h6 id="反射的实际应用" tabindex="-1">反射的实际应用 <a class="header-anchor" href="#反射的实际应用" aria-label="Permalink to &quot;反射的实际应用&quot;">​</a></h6><ul><li>自定义注解</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ElementType.FIELD})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">RealName</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//属性字段名称 默认空字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.FIELD})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">RealName</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//属性字段名称 默认空字符串</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>实体类中属性添加注解 例</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RealName</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;我&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String me;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RealName</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;我的实际名字&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String myRealName;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RealName</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;我&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String me;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RealName</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;我的实际名字&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String myRealName;</span></span></code></pre></div><ul><li>反射获取数据</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//创建map用来接收属性以及其注解的值</span></span>
<span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取类名的包名地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; printClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.simplemw.user&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//java反射机制获取所有属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Field</span><span style="color:#E1E4E8;">[] fields </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> printClass.</span><span style="color:#B392F0;">getDeclaredFields</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//遍历属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Field field </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fields) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String isNotNullStr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 判断是否属性上存在注解  RealName</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> annotationPresent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> field.</span><span style="color:#B392F0;">isAnnotationPresent</span><span style="color:#E1E4E8;">(RealName.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (annotationPresent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 获取自定义注解对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            RealName realName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> field.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(RealName.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 根据对象获取注解值</span></span>
<span class="line"><span style="color:#E1E4E8;">            isNotNullStr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> realName.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(field.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(),isNotNullStr);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//打印测试结果</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String str</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">map.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;---&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(str));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//创建map用来接收属性以及其注解的值</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取类名的包名地址</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; printClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.simplemw.user&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//java反射机制获取所有属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Field</span><span style="color:#24292E;">[] fields </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> printClass.</span><span style="color:#6F42C1;">getDeclaredFields</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//遍历属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Field field </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> fields) {</span></span>
<span class="line"><span style="color:#24292E;">        String isNotNullStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 判断是否属性上存在注解  RealName</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> annotationPresent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> field.</span><span style="color:#6F42C1;">isAnnotationPresent</span><span style="color:#24292E;">(RealName.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (annotationPresent) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 获取自定义注解对象</span></span>
<span class="line"><span style="color:#24292E;">            RealName realName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> field.</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(RealName.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 根据对象获取注解值</span></span>
<span class="line"><span style="color:#24292E;">            isNotNullStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> realName.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(field.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(),isNotNullStr);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//打印测试结果</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String str</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;---&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(str));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,19),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const D=s(p,[["render",t]]);export{A as __pageData,D as default};
